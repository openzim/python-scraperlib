[build-system]
# jinja2 is required to generate JS and Python rules at build time
# PyYAML is used to parse fuzzy rules and generate Python/JS code
requires = ["hatchling", "hatch-openzim>=0.2", "jinja2==3.1.5", "PyYAML==6.0.2"]
build-backend = "hatchling.build"

[project]
name = "zimscraperlib"
requires-python = ">=3.13,<3.14"
description = "Collection of python tools to re-use common code across scrapers"
readme = "README.md"
dependencies = [
  "iso639-lang>=2.4.0,<3.0",
  "requests>=2.25.1,<3.0",
  "colorthief==0.2.1",
  "python-resize-image>=1.1.19,<1.2",
  "Babel>=2.9,<3.0",
  "python-magic>=0.4.3,<0.5",
  "libzim>=3.4.0,<4.0",
  "beautifulsoup4>=4.9.3,<5.0",
  "lxml>=4.6.3,<6.0",
  "optimize-images>=1.3.6,<2.0",
  # regex has no upper-bound due to "date-based" release numbers, no semver, so their
  # promise is that they will never (or always) break the API, and the API is very
  # limited and we use only a very small subset of it.
  "regex>=2020.7.14",
  "pymupdf>=1.24.0,<2.0",
  "CairoSVG>=2.2.0,<3.0",
  "beartype==0.19.0",
  # youtube-dl should be updated as frequently as possible
  "yt-dlp",
  "pillow>=7.0.0,<12.0",
  "urllib3>=1.26.5,<2.4.0",
  "piexif==1.1.3", # this dep is a nightmare in terms of release management, better pinned just like in optimize-images anyway
  "idna>=2.5,<4.0"
]
dynamic = ["authors", "classifiers", "keywords", "license", "version", "urls"]

[tool.hatch.metadata.hooks.openzim-metadata]
kind = "scraper"
additional-classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
]

[tool.hatch.build.hooks.openzim-build]

[project.optional-dependencies]
scripts = [
  "invoke==2.2.0",
  # jinja2 is required to generate JS and Python rules at build time
  # PyYAML is used to parse fuzzy rules and generate Python/JS code
  # also update version in build-system above and in build_js.sh
  "jinja2==3.1.5",
  "PyYAML==6.0.2",

]
lint = [
  "black==24.10.0",
  "ruff==0.9.2",
]
check = [
  "pyright==1.1.391",
  "pytest==8.3.4",
]
test = [
  "pytest==8.3.4",
  "pytest-mock==3.14.0",
  "coverage==7.6.10",
]
docs = [
  "mkdocs==1.6.1",
  "mkdocstrings[python]==0.27.0",
  "mkdocs-material==9.5.50",
  "pymdown-extensions==10.14",
  "mkdocs-gen-files==0.5.0",
  "mkdocs-literate-nav==0.6.1",
  "mkdocs-include-markdown-plugin==7.1.2",
]
dev = [
  "ipython==8.31.0",
  "pre-commit==4.0.1",
  "zimscraperlib[scripts]",
  "zimscraperlib[lint]",
  "zimscraperlib[test]",
  "zimscraperlib[check]",
  "zimscraperlib[docs]",
]

[project.scripts]
fix_ogvjs_dist = "zimscraperlib.fix_ogvjs_dist:run"

[tool.hatch.version]
path = "src/zimscraperlib/__about__.py"

[tool.hatch.build]
exclude = [
  "/.github",
]

[tool.hatch.build.targets.wheel]
packages = ["src/zimscraperlib"]
artifacts = [
  "src/zimscraperlib/rewriting/statics/**",
  "src/zimscraperlib/rewriting/rules.py",
  "tests/rewriting/test_fuzzy_rules.py",
]

[tool.hatch.build.targets.sdist]
artifacts = [
  "src/zimscraperlib/rewriting/statics/**",
  "src/zimscraperlib/rewriting/rules.py",
  "tests/rewriting/test_fuzzy_rules.py",
]

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.test]
features = ["scripts", "test"]

[tool.hatch.envs.test.scripts]
run = "inv test --args '{args}'"
run-cov = "inv test-cov --args '{args}'"
report-cov = "inv report-cov"
coverage = "inv coverage --args '{args}'"
html = "inv coverage --html --args '{args}'"

[tool.hatch.envs.lint]
template = "lint"
skip-install = false
features = ["scripts", "lint"]

[tool.hatch.envs.lint.scripts]
black = "inv lint-black --args '{args}'"
ruff = "inv lint-ruff --args '{args}'"
all = "inv lintall --args '{args}'"
fix-black = "inv fix-black --args '{args}'"
fix-ruff = "inv fix-ruff --args '{args}'"
fixall = "inv fixall --args '{args}'"

[tool.hatch.envs.check]
features = ["scripts", "check"]

[tool.hatch.envs.check.scripts]
pyright = "inv check-pyright --args '{args}'"
all = "inv checkall --args '{args}'"

[tool.hatch.envs.docs]
features = ["scripts", "docs"]

[tool.hatch.envs.docs.scripts]
serve = "inv docs-serve --args '{args}'"
build = "inv docs-build --args '{args}'"

[tool.black]
line-length = 88
target-version = ['py313']

[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src", "contrib"]

[tool.ruff.lint]
select = [
  "A",  # flake8-builtins
  # "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  # "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  # "BLE",  # flake8-blind-except
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  # "COM",  # flake8-commas
  # "D",  # pydocstyle
  # "DJ",  # flake8-django
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle (default)
  "EM",  # flake8-errmsg
  # "ERA",  # eradicate
  # "EXE",  # flake8-executable
  "F",  # Pyflakes (default)
  # "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  # "FLY",  # flynt
  # "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  # "INP",  # flake8-no-pep420
  # "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "N",  # pep8-naming
  # "NPY",  # NumPy-specific rules
  # "PD",  # pandas-vet
  # "PGH",  # pygrep-hooks
  # "PIE",  # flake8-pie
  # "PL",  # Pylint
  "PLC",  # Pylint: Convention
  "PLE",  # Pylint: Error
  "PLR",  # Pylint: Refactor
  "PLW",  # Pylint: Warning
  # "PT",  # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "PYI",  # flake8-pyi
  "Q",  # flake8-quotes
  # "RET",  # flake8-return
  # "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",  # flake8-bandit
  # "SIM",  # flake8-simplify
  # "SLF",  # flake8-self
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  # "TCH",  # flake8-type-checking
  # "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  # "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  # Allow to shadow Python standard-library modules
  "A005",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Remove flake8-errmsg since we consider they bloat the code and provide limited value
  "EM",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore warnings on subprocess.run / popen
  "S603",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # To be fixed once more recent Python versions are available
  "UP006", "UP007"
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["zimscraperlib"]

[tool.ruff.lint.flake8-bugbear]
# add exceptions to B008 for fastapi.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# _libkiwix mimics libkiwix C++ code, names obey C++ conventions
"src/zimscraperlib/zim/_libkiwix.py" = ["N802", "N803", "N806"]
# beartype must be first
"src/zimscraperlib/__init__.py" = ["E402"]

[tool.pytest.ini_options]
minversion = "7.3"
testpaths = ["tests"]
pythonpath = [".", "src"]

[tool.coverage.paths]
zimscraperlib = ["src/zimscraperlib"]
tests = ["tests"]

[tool.coverage.run]
source_pkgs = ["zimscraperlib"]
branch = true
parallel = true
omit = [
  "src/zimscraperlib/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*Protocol.*",
  "@abstractmethod",
]

[tool.pyright]
include = ["contrib", "src", "tests", "tasks.py"]
exclude = [".env/**", ".venv/**"]
extraPaths = ["src"]
pythonVersion = "3.13"
typeCheckingMode="strict"
disableBytesTypePromotions = true

[[tool.pyright.overrides.files]]
files = [
  "src/zimscraperlib/rewriting**/*.py",
  "tests/rewriting/**/*.py"
]
